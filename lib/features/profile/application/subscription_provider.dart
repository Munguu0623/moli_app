// lib/features/profile/application/subscription_provider.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'user_provider.dart';

/// Payment status
enum PaymentStatus {
  idle,
  processing,
  success,
  failed;

  String get label {
    switch (this) {
      case PaymentStatus.idle:
        return '–•“Ø–ª—ç—ç–≥–¥—ç–∂ –±—É–π';
      case PaymentStatus.processing:
        return '–¢”©–ª–∂ –±–∞–π–Ω–∞...';
      case PaymentStatus.success:
        return '–ê–º–∂–∏–ª—Ç—Ç–∞–π';
      case PaymentStatus.failed:
        return '–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞';
    }
  }
}

/// Payment provider (QPay mock)
final paymentStatusProvider =
    StateNotifierProvider<PaymentStatusNotifier, PaymentStatus>((ref) {
      return PaymentStatusNotifier();
    });

class PaymentStatusNotifier extends StateNotifier<PaymentStatus> {
  PaymentStatusNotifier() : super(PaymentStatus.idle);

  /// Mock payment processing
  Future<bool> processPayment(int amount) async {
    state = PaymentStatus.processing;

    // Simulate payment delay
    await Future.delayed(const Duration(seconds: 2));

    // Mock success (90% success rate)
    final success = DateTime.now().millisecond % 10 != 0;

    state = success ? PaymentStatus.success : PaymentStatus.failed;

    // Reset to idle after 3 seconds
    Future.delayed(const Duration(seconds: 3), () {
      if (mounted) {
        state = PaymentStatus.idle;
      }
    });

    return success;
  }

  void reset() {
    state = PaymentStatus.idle;
  }
}

/// Subscription management
final subscriptionServiceProvider = Provider<SubscriptionService>((ref) {
  return SubscriptionService(ref);
});

class SubscriptionService {
  final Ref ref;

  SubscriptionService(this.ref);

  /// Premium –±–æ–ª–æ—Ö
  Future<bool> upgradeToPremium() async {
    final paymentNotifier = ref.read(paymentStatusProvider.notifier);
    final userNotifier = ref.read(userProvider.notifier);

    // Mock price: 120,000 MNT for 1 year
    final success = await paymentNotifier.processPayment(120000);

    if (success) {
      userNotifier.upgradeToPremium();
    }

    return success;
  }

  /// Subscription —à–∏–Ω—ç—á–ª—ç—Ö
  Future<bool> renewSubscription() async {
    final paymentNotifier = ref.read(paymentStatusProvider.notifier);
    final userNotifier = ref.read(userProvider.notifier);

    final success = await paymentNotifier.processPayment(120000);

    if (success) {
      final newExpiry = DateTime.now().add(const Duration(days: 365));
      userNotifier.updateSubscription(expiryDate: newExpiry);
    }

    return success;
  }

  /// Auto renewal —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
  void setAutoRenewal(bool enabled) {
    ref.read(userProvider.notifier).setAutoRenewal(enabled);
  }

  /// Premium —Ü—É—Ü–ª–∞—Ö
  void cancelPremium() {
    ref.read(userProvider.notifier).cancelPremium();
  }
}

/// Premium features list
final premiumFeaturesProvider = Provider<List<PremiumFeature>>((ref) {
  return const [
    PremiumFeature(
      icon: 'üí¨',
      title: '–•—è–∑–≥–∞–∞—Ä–≥“Ø–π –∑”©–≤–ª”©–≥”©”©',
      description: '–ú—ç—Ä–≥—ç–∂–ª–∏–π–Ω –∑”©–≤–ª”©—Ö –Ω–∞—Ä—Ç–∞–π —Ö—è–∑–≥–∞–∞—Ä–≥“Ø–π —á–∞—Ç–ª–∞—Ö',
    ),
    PremiumFeature(
      icon: 'üìä',
      title: '–î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —Ç–∞–π–ª–∞–Ω',
      description: '–¢–µ—Å—Ç–∏–π–Ω “Ø—Ä –¥“Ø–Ω–≥–∏–π–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –∑–∞–¥–∞—Ä–≥–∞–∞',
    ),
    PremiumFeature(
      icon: 'üéØ',
      title: '–•—É–≤–∏–π–Ω –∑”©–≤–ª”©–≥”©”©',
      description: '–¢–∞–Ω–¥ —Ç—É—Å–≥–∞–π–ª–∞–Ω –±–æ–ª–æ–≤—Å—Ä—É—É–ª—Å–∞–Ω –º—ç—Ä–≥—ç–∂–ª–∏–π–Ω –∑”©–≤–ª”©–≥”©”©',
    ),
    PremiumFeature(
      icon: '‚≠ê',
      title: '–û–Ω—Ü–≥–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç',
      description: 'Premium —Ö–∏—á—ç—ç–ª, —Å—É—Ä–≥–∞–ª—Ç—É—É–¥',
    ),
    PremiumFeature(
      icon: 'üì±',
      title: '–ú—ç–¥—ç–≥–¥—ç–ª',
      description: '–≠–ª—Å—ç–ª—Ç–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª, —Ö—É–≥–∞—Ü–∞–∞–Ω—ã —Å–∞–Ω—É—É–ª–≥–∞',
    ),
    PremiumFeature(
      icon: 'üîî',
      title: '–¢—É—Å–≥–∞–π —Å–∞–Ω–∞–ª',
      description: 'Premium –≥–∏—à“Ø“Ø–¥—ç–¥ –∑–æ—Ä–∏—É–ª—Å–∞–Ω —Ö”©–Ω–≥”©–ª”©–ª—Ç',
    ),
  ];
});

/// Premium feature model
class PremiumFeature {
  final String icon;
  final String title;
  final String description;

  const PremiumFeature({
    required this.icon,
    required this.title,
    required this.description,
  });
}
